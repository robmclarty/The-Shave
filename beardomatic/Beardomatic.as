package  {	import flash.display.Sprite;	import flash.events.MouseEvent;	import flash.events.Event;	import Math;	public class Beardomatic extends Sprite {		private var _startx:Number;		private var _starty:Number;		private var _endx:Number;		private var _endy:Number;		private var _rotation:Number;		private var guide_line:Sprite = new Sprite();		private var beard:Sprite = new Sprite();		public function Beardomatic() {			guide_line.graphics.lineStyle(1);			beard.graphics.lineStyle(1);			stage.addChild(guide_line);			stage.addChild(beard);			stage.addEventListener(MouseEvent.MOUSE_DOWN, save_hair_origin);			stage.addEventListener(MouseEvent.MOUSE_UP, save_hair_rotation_and_output);			stage.addEventListener(MouseEvent.MOUSE_MOVE, draw_hair_line);		}		// Static		public static function random_range(max:Number, min:Number = 0):Number {      return Math.random() * (max - min) + min;    }		// Events		private function save_hair_origin(e:MouseEvent):void {			_startx = e.stageX;			_starty = e.stageY;			guide_line.graphics.moveTo(_startx, _starty);		}		private function save_hair_rotation_and_output(e:MouseEvent):void {			var adjacent:Number;			var opposite:Number;			_endx = e.stageX;			_endy = e.stageY;			adjacent = _endx - _startx;			opposite = _endy - _starty;			_rotation = Math.atan(opposite / adjacent) / (Math.PI / 180);			if (_rotation < 0 || (opposite < 0 && adjacent < 0)) {				_rotation += 180;			}			if (opposite < 0 && adjacent > 0) {				_rotation += 180;			}			if (opposite == 0 && adjacent == 0) {				_rotation = 0;			}			guide_line.graphics.clear();			output();		}		private function draw_hair_line(e:MouseEvent):void {			if (e.buttonDown) {				guide_line.graphics.lineTo(e.stageX, e.stageY);			}		}		private function add_hair_to_beard( startx:int,																				starty:int,																				endx:int,																				endy:int ):void {			beard.graphics.moveTo(startx, starty);			beard.graphics.lineTo(endx, endy);		}		// Helpers		private function trace_hair_xml(x:String,																		y:String,																		rotation:String):void {			trace('<hair' +						' x="' + 				x + '"' +						' y="' + 				y + '"' +						' rotation="' + rotation + '"' +						'/>');		}		// Output to console with ten randomly generated hairs around		// the hair_x_position and hair_y_position coordinates in a		// format compatible with XML.		private function output():void {			for (var i:int = 0; i < 5; i += 1) {				var temp_startx:Number = random_range(_startx - 10, _startx + 10);				var temp_starty:Number = random_range(_starty - 10, _starty + 10);				var	temp_endx:Number = _endx + (temp_startx - _startx);				var temp_endy:Number = _endy + (temp_starty - _starty);				trace_hair_xml(String(temp_startx), String(temp_starty), String(_rotation));				add_hair_to_beard(temp_startx, temp_starty, temp_endx, temp_endy);			}		}	}}